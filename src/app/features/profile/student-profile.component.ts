import { Component, signal, computed, inject, OnInit, ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { AuthService } from '../../core/services/auth.service';
import { User } from '../../shared/types/user.types';
import { ErrorHandlingService } from '../../shared/services/error-handling.service';
import { LoadingComponent } from '../../shared/components/loading/loading.component';

interface StudentProfile {
  id: string;
  userId: string;
  studentId: string;
  fullName: string;
  email: string;
  phone: string;
  dateOfBirth: Date;
  address: string;
  avatar: string;
  bio: string;
  interests: string[];
  learningGoals: string[];
  preferredSubjects: string[];
  studySchedule: StudySchedule;
  achievements: Achievement[];
  certificates: Certificate[];
  socialLinks: SocialLink[];
  createdAt: Date;
  updatedAt: Date;
}

interface StudySchedule {
  preferredStudyTime: string;
  studyDays: string[];
  studyDuration: number; // hours per day
  breakInterval: number; // minutes
}

interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  earnedAt: Date;
  category: 'course' | 'quiz' | 'streak' | 'social' | 'milestone';
}

interface Certificate {
  id: string;
  courseId: string;
  courseName: string;
  issuedAt: Date;
  certificateUrl: string;
  isValid: boolean;
  expiryDate?: Date;
}

interface SocialLink {
  platform: string;
  url: string;
  isPublic: boolean;
}

@Component({
  selector: 'app-student-profile',
  imports: [CommonModule, RouterModule, FormsModule, LoadingComponent],
  encapsulation: ViewEncapsulation.None,
  standalone: true,
  template: `
    <!-- Loading State -->
    <app-loading 
      [show]="isLoading()" 
      text="ƒêang t·∫£i h·ªì s∆° c√° nh√¢n..."
      subtext="Vui l√≤ng ch·ªù trong gi√¢y l√°t"
      variant="overlay"
      color="blue">
    </app-loading>
    <div class="bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <!-- Profile Header -->
      <div class="bg-white shadow-xl border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-6 py-8">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-6">
              <div class="relative">
                <img [src]="profile().avatar" [alt]="profile().fullName" 
                     class="w-24 h-24 rounded-full object-cover border-4 border-white shadow-lg">
                <button (click)="editAvatar()"
                        class="absolute bottom-0 right-0 w-8 h-8 bg-blue-600 text-white rounded-full flex items-center justify-center hover:bg-blue-700 transition-colors">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                  </svg>
                </button>
              </div>
              <div>
                <h1 class="text-3xl font-bold text-gray-900">{{ profile().fullName }}</h1>
                <p class="text-gray-600 text-lg">{{ profile().studentId }}</p>
                <p class="text-gray-500">{{ profile().email }}</p>
                <div class="flex items-center space-x-4 mt-3">
                  <span class="text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                    üéì {{ profile().certificates.length }} ch·ª©ng ch·ªâ
                  </span>
                  <span class="text-sm bg-green-100 text-green-800 px-3 py-1 rounded-full">
                    üèÜ {{ profile().achievements.length }} th√†nh t√≠ch
                  </span>
                  <span class="text-sm bg-purple-100 text-purple-800 px-3 py-1 rounded-full">
                    üìö {{ profile().interests.length }} lƒ©nh v·ª±c quan t√¢m
                  </span>
                </div>
              </div>
            </div>
            
            <div class="flex items-center space-x-4">
              <button (click)="editProfile()"
                      class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
                <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>
                </svg>
                Ch·ªânh s·ª≠a h·ªì s∆°
              </button>
              
              <button (click)="goToDashboard()"
                      class="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors font-medium">
                <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 1 1 0 00.2-.285.985.985 0 00.15-.76V9.397zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z"></path>
                </svg>
                V·ªÅ Dashboard
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="max-w-7xl mx-auto px-6 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <!-- Main Content -->
          <div class="lg:col-span-2 space-y-8">
            <!-- Personal Information -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">Th√¥ng tin c√° nh√¢n</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">H·ªç v√† t√™n</label>
                  <p class="text-gray-900">{{ profile().fullName }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">M√£ sinh vi√™n</label>
                  <p class="text-gray-900">{{ profile().studentId }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <p class="text-gray-900">{{ profile().email }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
                  <p class="text-gray-900">{{ profile().phone || 'Ch∆∞a c·∫≠p nh·∫≠t' }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Ng√†y sinh</label>
                  <p class="text-gray-900">{{ formatDate(profile().dateOfBirth) }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">ƒê·ªãa ch·ªâ</label>
                  <p class="text-gray-900">{{ profile().address || 'Ch∆∞a c·∫≠p nh·∫≠t' }}</p>
                </div>
              </div>
              
              @if (profile().bio) {
                <div class="mt-6">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Gi·ªõi thi·ªáu b·∫£n th√¢n</label>
                  <p class="text-gray-900 leading-relaxed">{{ profile().bio }}</p>
                </div>
              }
            </div>

            <!-- Learning Goals -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">M·ª•c ti√™u h·ªçc t·∫≠p</h3>
              <div class="space-y-4">
                @for (goal of profile().learningGoals; track goal) {
                  <div class="flex items-center space-x-3 p-4 bg-blue-50 rounded-xl">
                    <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                      </svg>
                    </div>
                    <span class="text-gray-900">{{ goal }}</span>
                  </div>
                }
              </div>
            </div>

            <!-- Interests -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">Lƒ©nh v·ª±c quan t√¢m</h3>
              <div class="flex flex-wrap gap-3">
                @for (interest of profile().interests; track interest) {
                  <span class="px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                    {{ interest }}
                  </span>
                }
              </div>
            </div>

            <!-- Study Schedule -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">L·ªãch h·ªçc t·∫≠p</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Th·ªùi gian h·ªçc ∆∞a th√≠ch</label>
                  <p class="text-gray-900">{{ profile().studySchedule.preferredStudyTime }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Ng√†y h·ªçc trong tu·∫ßn</label>
                  <p class="text-gray-900">{{ profile().studySchedule.studyDays.join(', ') }}</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Th·ªùi gian h·ªçc m·ªói ng√†y</label>
                  <p class="text-gray-900">{{ profile().studySchedule.studyDuration }} gi·ªù</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Th·ªùi gian ngh·ªâ</label>
                  <p class="text-gray-900">{{ profile().studySchedule.breakInterval }} ph√∫t</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Sidebar -->
          <div class="space-y-8">
            <!-- Achievements -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">Th√†nh t√≠ch g·∫ßn ƒë√¢y</h3>
              <div class="space-y-4">
                @for (achievement of profile().achievements.slice(0, 5); track achievement.id) {
                  <div class="flex items-center space-x-3 p-3 bg-gray-50 rounded-xl">
                    <div class="w-10 h-10 bg-yellow-100 rounded-xl flex items-center justify-center">
                      <span class="text-lg">{{ achievement.icon }}</span>
                    </div>
                    <div class="flex-1">
                      <h4 class="font-medium text-gray-900">{{ achievement.title }}</h4>
                      <p class="text-sm text-gray-600">{{ achievement.description }}</p>
                      <p class="text-xs text-gray-500">{{ formatDate(achievement.earnedAt) }}</p>
                    </div>
                  </div>
                }
              </div>
              <button (click)="viewAllAchievements()"
                      class="w-full mt-4 text-blue-600 hover:text-blue-800 font-medium">
                Xem t·∫•t c·∫£ th√†nh t√≠ch ‚Üí
              </button>
            </div>

            <!-- Certificates -->
            <div class="bg-white rounded-2xl shadow-lg p-6">
              <h3 class="text-xl font-bold text-gray-900 mb-6">Ch·ª©ng ch·ªâ</h3>
              <div class="space-y-4">
                @for (certificate of profile().certificates.slice(0, 3); track certificate.id) {
                  <div class="p-4 bg-gray-50 rounded-xl">
                    <h4 class="font-medium text-gray-900">{{ certificate.courseName }}</h4>
                    <p class="text-sm text-gray-600">C·∫•p ng√†y: {{ formatDate(certificate.issuedAt) }}</p>
                    <div class="flex items-center justify-between mt-2">
                      <span class="text-xs px-2 py-1 rounded-full"
                            [class]="certificate.isValid ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                        {{ certificate.isValid ? 'C√≤n hi·ªáu l·ª±c' : 'H·∫øt h·∫°n' }}
                      </span>
                      <button (click)="viewCertificate(certificate.id)"
                              class="text-blue-600 hover:text-blue-800 text-sm">
                        Xem ch·ª©ng ch·ªâ
                      </button>
                    </div>
                  </div>
                }
              </div>
              <button (click)="viewAllCertificates()"
                      class="w-full mt-4 text-blue-600 hover:text-blue-800 font-medium">
                Xem t·∫•t c·∫£ ch·ª©ng ch·ªâ ‚Üí
              </button>
            </div>

            <!-- Social Links -->
            @if (profile().socialLinks.length > 0) {
              <div class="bg-white rounded-2xl shadow-lg p-6">
                <h3 class="text-xl font-bold text-gray-900 mb-6">Li√™n k·∫øt x√£ h·ªôi</h3>
                <div class="space-y-3">
                  @for (link of profile().socialLinks; track link.platform) {
                    <div class="flex items-center space-x-3">
                      <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                        <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0 00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1 1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0 101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1 1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z" clip-rule="evenodd"></path>
                        </svg>
                      </div>
                      <span class="text-gray-900">{{ link.platform }}</span>
                    </div>
                  }
                </div>
              </div>
            }
          </div>
        </div>
      </div>
    </div>
  `,
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class StudentProfileComponent implements OnInit {
  protected authService = inject(AuthService);
  private router = inject(Router);
  private errorService = inject(ErrorHandlingService);

  // Loading state
  isLoading = signal<boolean>(true);

  // Mock profile data
  profile = signal<StudentProfile>({
    id: 'profile-1',
    userId: 'user-1',
    studentId: 'SV2024001',
    fullName: 'Nguy·ªÖn VƒÉn H·∫£i',
    email: 'student@demo.com',
    phone: '0123456789',
    dateOfBirth: new Date('1995-06-15'),
    address: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
    avatar: 'https://ui-avatars.com/api/?name=Nguyen+Van+Hai&background=3b82f6&color=ffffff&size=150',
    bio: 'T√¥i l√† sinh vi√™n nƒÉm 3 chuy√™n ng√†nh H√†ng h·∫£i t·∫°i Tr∆∞·ªùng ƒê·∫°i h·ªçc H√†ng h·∫£i Vi·ªát Nam. T√¥i c√≥ ni·ªÅm ƒëam m√™ v·ªõi ng√†nh h√†ng h·∫£i v√† mong mu·ªën tr·ªü th√†nh m·ªôt thuy·ªÅn tr∆∞·ªüng chuy√™n nghi·ªáp.',
    interests: ['An to√†n h√†ng h·∫£i', 'ƒêi·ªÅu khi·ªÉn t√†u', 'K·ªπ thu·∫≠t t√†u bi·ªÉn', 'Lu·∫≠t h√†ng h·∫£i', 'Qu·∫£n l√Ω c·∫£ng'],
    learningGoals: [
      'Ho√†n th√†nh ch·ª©ng ch·ªâ STCW',
      'ƒê·∫°t ƒë∆∞·ª£c ch·ª©ng ch·ªâ thuy·ªÅn tr∆∞·ªüng h·∫°ng 2',
      'H·ªçc th√™m v·ªÅ c√¥ng ngh·ªá h√†ng h·∫£i hi·ªán ƒë·∫°i',
      'N√¢ng cao k·ªπ nƒÉng ti·∫øng Anh chuy√™n ng√†nh'
    ],
    preferredSubjects: ['An to√†n h√†ng h·∫£i', 'ƒêi·ªÅu khi·ªÉn t√†u', 'K·ªπ thu·∫≠t t√†u bi·ªÉn'],
    studySchedule: {
      preferredStudyTime: '19:00 - 22:00',
      studyDays: ['Th·ª© 2', 'Th·ª© 4', 'Th·ª© 6', 'Ch·ªß nh·∫≠t'],
      studyDuration: 3,
      breakInterval: 15
    },
    achievements: [
      {
        id: 'achievement-1',
        title: 'H·ªçc vi√™n chƒÉm ch·ªâ',
        description: 'H·ªçc li√™n ti·∫øp 7 ng√†y',
        icon: 'üî•',
        earnedAt: new Date('2024-09-10'),
        category: 'streak'
      },
      {
        id: 'achievement-2',
        title: 'Quiz Master',
        description: 'ƒê·∫°t ƒëi·ªÉm cao trong 5 quiz li√™n ti·∫øp',
        icon: 'üèÜ',
        earnedAt: new Date('2024-09-08'),
        category: 'quiz'
      },
      {
        id: 'achievement-3',
        title: 'Course Completer',
        description: 'Ho√†n th√†nh kh√≥a h·ªçc ƒë·∫ßu ti√™n',
        icon: 'üéì',
        earnedAt: new Date('2024-09-05'),
        category: 'course'
      }
    ],
    certificates: [
      {
        id: 'cert-1',
        courseId: 'course-1',
        courseName: 'K·ªπ thu·∫≠t T√†u bi·ªÉn C∆° b·∫£n',
        issuedAt: new Date('2024-08-15'),
        certificateUrl: '/certificates/cert-1.pdf',
        isValid: true
      },
      {
        id: 'cert-2',
        courseId: 'course-2',
        courseName: 'An to√†n H√†ng h·∫£i',
        issuedAt: new Date('2024-07-20'),
        certificateUrl: '/certificates/cert-2.pdf',
        isValid: true
      }
    ],
    socialLinks: [
      {
        platform: 'LinkedIn',
        url: 'https://linkedin.com/in/nguyenvanhai',
        isPublic: true
      },
      {
        platform: 'Facebook',
        url: 'https://facebook.com/nguyenvanhai',
        isPublic: false
      }
    ],
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-09-15')
  });

  ngOnInit(): void {
    this.loadProfile();
  }

  private async loadProfile(): Promise<void> {
    try {
      this.isLoading.set(true);
      
      // Simulate loading profile data
      await this.simulateProfileLoading();
      
      console.log('üîß Student Profile - Component initialized');
      console.log('üîß Student Profile - Profile data loaded:', this.profile());
      
      this.errorService.showSuccess('H·ªì s∆° c√° nh√¢n ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!', 'profile');
      
    } catch (error) {
      this.errorService.handleApiError(error, 'profile');
    } finally {
      this.isLoading.set(false);
    }
  }

  private async simulateProfileLoading(): Promise<void> {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  editProfile(): void {
    console.log('üîß Student Profile - Edit profile');
    this.errorService.showInfo('T√≠nh nƒÉng ch·ªânh s·ª≠a h·ªì s∆° s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo', 'profile');
  }

  editAvatar(): void {
    console.log('üîß Student Profile - Edit avatar');
    this.errorService.showInfo('T√≠nh nƒÉng ch·ªânh s·ª≠a avatar s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo', 'avatar');
  }

  goToDashboard(): void {
    console.log('üîß Student Profile - Go to dashboard');
    this.router.navigate(['/student/dashboard']).catch(error => {
      this.errorService.handleNavigationError(error, '/student/dashboard');
    });
  }

  viewAllAchievements(): void {
    console.log('üîß Student Profile - View all achievements');
    this.errorService.showInfo('T√≠nh nƒÉng xem t·∫•t c·∫£ th√†nh t√≠ch s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo', 'achievements');
  }

  viewAllCertificates(): void {
    console.log('üîß Student Profile - View all certificates');
    this.errorService.showInfo('T√≠nh nƒÉng xem t·∫•t c·∫£ ch·ª©ng ch·ªâ s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo', 'certificates');
  }

  viewCertificate(certificateId: string): void {
    console.log('üîß Student Profile - View certificate:', certificateId);
    // Open certificate in new tab
    window.open(`/certificates/${certificateId}`, '_blank');
    this.errorService.showSuccess('Ch·ª©ng ch·ªâ ƒëang ƒë∆∞·ª£c m·ªü trong tab m·ªõi', 'certificate');
  }

  downloadCertificate(certificateId: string): void {
    console.log('üîß Student Profile - Download certificate:', certificateId);
    const certificate = this.profile().certificates.find(cert => cert.id === certificateId);
    if (certificate) {
      const link = document.createElement('a');
      link.href = certificate.certificateUrl;
      link.download = `certificate-${certificate.courseName}.pdf`;
      link.click();
      this.errorService.showSuccess('Ch·ª©ng ch·ªâ ƒëang ƒë∆∞·ª£c t·∫£i xu·ªëng', 'certificate');
    }
  }

  shareAchievement(achievementId: string): void {
    console.log('üîß Student Profile - Share achievement:', achievementId);
    this.errorService.showInfo('T√≠nh nƒÉng chia s·∫ª th√†nh t√≠ch s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo', 'achievement');
  }

  updateSocialLink(platform: string, url: string): void {
    console.log('üîß Student Profile - Update social link:', platform, url);
    const socialLinks = this.profile().socialLinks;
    const updatedLinks = socialLinks.map(link => 
      link.platform === platform ? { ...link, url } : link
    );
    this.profile.set({ ...this.profile(), socialLinks: updatedLinks });
    this.errorService.showSuccess(`ƒê√£ c·∫≠p nh·∫≠t li√™n k·∫øt ${platform}`, 'social');
  }

  toggleSocialLinkVisibility(platform: string): void {
    console.log('üîß Student Profile - Toggle social link visibility:', platform);
    const socialLinks = this.profile().socialLinks;
    const updatedLinks = socialLinks.map(link => 
      link.platform === platform ? { ...link, isPublic: !link.isPublic } : link
    );
    this.profile.set({ ...this.profile(), socialLinks: updatedLinks });
    this.errorService.showSuccess(`ƒê√£ thay ƒë·ªïi quy·ªÅn ri√™ng t∆∞ cho ${platform}`, 'social');
  }

  formatDate(date: Date): string {
    return date.toLocaleDateString('vi-VN');
  }
}